[
{
	"uri": "http://route-rs.github.io/route-rs/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "http://route-rs.github.io/route-rs/basics/a-content/",
	"title": "A Content",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://route-rs.github.io/route-rs/basics/b-content/",
	"title": "B Content",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://route-rs.github.io/route-rs/basics/a-content/a-first/",
	"title": "A First",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://route-rs.github.io/route-rs/basics/a-content/a-second/",
	"title": "A Second",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://route-rs.github.io/route-rs/basics/b-content/b-first/",
	"title": "B First",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://route-rs.github.io/route-rs/basics/b-content/b-second/",
	"title": "B Second",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://route-rs.github.io/route-rs/",
	"title": "ROUTE-RS",
	"tags": [],
	"description": "",
	"content": " This project is in its very early stages of developmnet and is in extreme alpha. Do not expect packets to be routed, APIs to be stable, or for anything to work whatsoever.\n route-rs What is it? Route-rs is multithreaded, modular, software defined, router library, written in rust. Safe, fast, and extensible.\n Original click modular router Click Paper  Main Features  Concurrency by default (Using Tokio-rs as a runtime) Type safe (Written in Rust) Easily Extensible Runs in userspace  Overview Much like the original Click, units of computation are loosely defined around processors, which are objects that implement the process function. Processors are wrapped by ProcessorLinks, which is what the library will use to chain computation together, producing a functioning, modular, software-defined router. Processors come in either synchronous or asynchronous flavors. In general, synchronous processors should be used for short transformations; asynchronous processors are intended to carry out more computationally heavy tasks. They may also carry out tasks that wait for some period of time before returning, such as an processor that calls out to a seperate database to make a classificiation.\nThe router is laid out in a pull fashion, where the asynchronous processors drive the synchronous processors ahead of them, and the asynchronous processors are polled by the runtime. The last processor in the chain, generally a to_device processor that communicates with the networking stack, drives much of the router by trying to fetch packets from the processors connected to its input ports. This provides a nice feature; back-pressure. The processors stop processing packets when they have nowhere to put them, since most processors are \u0026ldquo;lazy\u0026rdquo; and do not attempt to fetch new packets unless asked by the processor connected to their output.\n"
},
{
	"uri": "http://route-rs.github.io/route-rs/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " These great people made this  List Of Great People  "
},
{
	"uri": "http://route-rs.github.io/route-rs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://route-rs.github.io/route-rs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]