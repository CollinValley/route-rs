// Generated by route-rs-graphgen
// Source graph: examples/trivial-identity/src/pipeline.xml

use crate::packets::*;
use futures::lazy;
use route_rs_runtime::link::primitive::*;
use route_rs_runtime::link::*;
use route_rs_runtime::pipeline::{InputChannelLink, OutputChannelLink};
use route_rs_runtime::processor::*;

pub struct Pipeline {}

impl route_rs_runtime::pipeline::Runner for Pipeline {
    type Input = IntegerPacket;
    type Output = IntegerPacket;

    fn run(
        input_channel: crossbeam::Receiver<Self::Input>,
        output_channel: crossbeam::Sender<Self::Output>,
    ) {
        let mut all_runnables: Vec<TokioRunnable> = vec![];

        let elem_1_identity = Identity::new();

        let link_1 = InputChannelLink::new(input_channel);

        let (mut runnables_2, mut egressors_2) = ProcessLink::new()
            .ingressor(Box::new(link_1))
            .processor(elem_1_identity)
            .build_link();
        all_runnables.append(&mut runnables_2);
        let link_2_egress_0 = egressors_2.remove(0);

        let link_3 = OutputChannelLink::new(link_2_egress_0, output_channel);

        tokio::run(lazy(move || {
            for r in all_runnables {
                tokio::spawn(r);
            }
            tokio::spawn(link_3);
            Ok(())
        }));
    }
}
